# Generated by Anaconda 39.32.6
# Generated by pykickstart v3.48
# version=DEVEL

# see https://pykickstart.readthedocs.io/en/latest/kickstart-docs.html#chapter-2-kickstart-commands-in-fedora

# ksvalidator kickstart.ks

# Use text mode install
text

# Reboot after installation
reboot

# System timezone
timezone US/Central --utc

# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'

# System language
lang en_US.UTF-8

# Root password
# rootpw --iscrypted $2b$10$dbEmfMvW0P7k06Q1VsmA2OeLw7FuhzgxIe4vP2hDmUHd9f2uNGDiu
rootpw --lock
user --groups=wheel,libvirt --name=cory --password=$y$j9T$VtBfjF3ijn4SoTjiK0SyegLJ$7.KpIklo9pe9WDAelI/OuEheavZ2zgk67jKhL9RxwlA --iscrypted --gecos="Cory"

# Firewall configuration
firewall --enabled --port=8080:tcp,9090:tcp --service=http,ssh

# Network information
# network --device=link --bootproto=dhcp --activate
%include /tmp/inst.network

# Use network installation
# url --url="http://mirrors.kernel.org/fedora/releases/39/Server/x86_64/os"
repo --name=updates
repo --name=fedora

# SELinux configuration
selinux --enforcing

firstboot --disable
# Do not configure the X Window System
skipx

# Clear the Master Boot Record
# zerombr

# Partition clearing information
%include /tmp/inst.disk
clearpart --initlabel --none

# System bootloader configuration
bootloader --location=mbr --append=""

# Disk partitioning information
# autopart --type=btrfs --encrypted --passphrase=alongpassword
%include /tmp/part.efi

part /boot --fstype="ext4" --size=1024
part btrfs.00 --fstype="btrfs" --size=10240 --maxsize=102400 --grow --encrypted --passphrase=alongpassword

btrfs none --data=single --label=fedora btrfs.00
btrfs /     --subvol --name=root fedora
btrfs /home --subvol --name=home fedora

part pv.00 --fstype="lvm" --size=2048 --grow
volgroup vmdata --pesize=4096 pv.00
# logvol none --vgname=data  --name=vm-01-sda --size=1024 --maxsize=102400 --grow
# logvol none --vgname=data  --name=vm-01-sdb --size=102400 --grow

%packages
# groups
@^server-product-environment
@container-management
@headless-management

# tpm / tang
clevis-*

# virtual
libvirt-daemon
libvirt-client
virt-manager

# sushy-emulation
gcc
ipmitool
libvirt-devel
python3-devel
python3-pip

# other
dnf-automatic
ksmtuned
bridge-utils
lshw
smartmontools
nvme-cli
btop
htop
iotop
tree
testdisk
byobu
gdisk

%end

%pre  --log=/root/ks-pre.log
set -x

# disk detection
[ -e /dev/vda ] && DISK=vda
[ -e /dev/nvme0n1 ] && DISK=nvme0n1
echo "ignoredisk --only-use=${DISK:-sda}" > /tmp/inst.disk

# efi detection
if [ -d "/sys/firmware/efi" ]; then
  echo 'part /boot/efi --fstype=efi --asprimary --size=200 --fsoptions="umask=0077,shortname=winnt"' > /tmp/part.efi
else
  echo 'part biosboot --fstype=biosboot --size=1' > /tmp/part.efi
fi

# network include
for NET in $(ls /sys/class/net)
do
  # skip loopback interface
  if [ "$NET" != "lo" ]; then
    INTERFACES=${NET},${INTERFACES}
    echo "network --device=${NET} --onboot=no" >> /tmp/inst.network
  fi
done

# setup bridge
echo "network --device=br0 --bootproto=dhcp --bridgeslaves=${INTERFACES%,} --onboot=yes" >> /tmp/inst.network

%end

%post --nochroot
  cp /root/ks-pre.log /mnt/sysroot/root
  cp /root/debug-pkgs.log /mnt/sysroot/root
%end

%post --log=/root/ks-post.log
set -x

LUKS_DEFAULT="alongpassword"
LUKS_KEY_FILE=/root/luks-pass

genpass(){
  < /dev/urandom tr -dc A-Z-a-z-0-9 | head -c"${1:-32}"
}

get_luks_part(){
  for part in /dev/{s,v}d[a]* /dev/nvme0n1*
  do
    [ -e "${part}" ] || continue
    echo "${LUKS_DEFAULT}" | cryptsetup open --test-passphrase "${part}" - && LUKS_PART="${part}"
  done

  echo "${LUKS_PART}"
}

luks_add_random_key(){
  LUKS_PART=${1:-$(get_luks_part)}
  LUKS_PASS=${2:-$(genpass 8)-$(genpass 8)-$(genpass 8)-$(genpass 8)}

  echo "${LUKS_PASS}" > "${LUKS_KEY_FILE}"

  printf '%s\n' "${LUKS_DEFAULT}" "${LUKS_PASS}" "${LUKS_PASS}" | \
    cryptsetup luksAddKey "${LUKS_PART}"

  printf '%s\n' "${LUKS_DEFAULT}" | \
    cryptsetup luksRemoveKey "${LUKS_PART}"
}

clevis_setup_root(){
  if [ -d "/sys/firmware/efi" ]; then
    systemd-analyze pcrs > /root/pcrs-ks

    cat "${LUKS_KEY_FILE}" | clevis luks bind -y -k - -d "${LUKS_PART}" tpm2 '{"pcr_ids":"0"}'
    # echo "${LUKS_DEFAULT}" | clevis luks bind -y -k - -d "${LUKS_PART}" tpm2 '{"pcr_ids":"0"}'
  else
    return
  fi
}

clevis_create_script(){
  echo '#!/bin/bash
  clevis luks list -d '"${LUKS_PART}"'

  clevis luks unbind -f -d '"${LUKS_PART}"' -s1
  clevis luks unbind -f -d '"${LUKS_PART}"' -s2
  cat ${LUKS_KEY_FILE} | clevis luks bind -y -k - -d '"${LUKS_PART}"' tpm2 '"'"'{"pcr_ids":"0,1,2,3,4,5,6"}'"'"'

  echo '"${LUKS_DEFAULT}"' | cryptsetup luksRemoveKey '"${LUKS_PART}"' -
  ' > /root/clevis_boot.sh
  chmod +x /root/clevis_boot.sh
}

ssh_add_user_key(){
  OS_USER=${1:-cory}
  GH_USER=${2:-codekow}
  OS_PATH=$(eval echo ~${OS_USER})

  mkdir -p ${OS_PATH}/.ssh

  # embedded ssh keys
cat << EOF >> ${OS_PATH}/.ssh/authorized_keys
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIIXLGAxOZLWpV1WWRu4GnFWEHVmLiSeXsMoChi4rXvDl cory@kowdora
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC4YQz9vhWtFC89pW+OdIjtngtYqoVHWfUQpqWqrS1OvvxFBGhMtA+AHd6er2rwXg+yg9v0vs9HJoHI0zzBueGy9zgeqZ73MydGLWSRkUZT/j345zz0z+lc9wgneUBn9gp1h7BBMajsrMVH+9xW+llsU7/CFOi8PAAF+DymBmUmvZU6Wvo+6JctO89p4dGZd+L1a9dbHbIO3crI+pc+JGooH16gdqnLUI/ZB1NencFezN5Wihkyazh2PvDr33TIXukzc2arpRcfW8rDWddFI661ieHjjHNaONohU7GRCUUgOor1a9Wy9U2goJ2BFuMpSrLu72HV9xjw0Q6Gqbp+zpJ7Yayg9NgtaPNCM7vAV+5u36Ip3/ADpXG2o5OKsg7uW0EvB3UdduPy10j+fyRzBmvAORBjdkHAssjRVZgYO0GsOPxW2RJHZY7xprm8CfvsJxLOy6tkh+dMZ9ufuWiYVbIHb536kz3W/c2f+DFsjVRPUee11r5LNZ/XO4xx7QpYIxc= cory@kowdora
EOF

  # github pub keys
  curl https://github.com/${GH_USER}.keys >> ${OS_PATH}/.ssh/authorized_keys

  # set user perms
  chmod 700 ${OS_PATH}/.ssh
  chmod 600 ${OS_PATH}/.ssh/authorized_keys
  chown -R ${OS_USER}: ${OS_PATH}/.ssh

  # restore selinux context with restorecon, if it is available:
  command -v restorecon > /dev/null && restorecon -RvF ${OS_PATH}/.ssh || true

  # sudo w/o password
  echo "${OS_USER}  ALL=(root) NOPASSWD:ALL" > /etc/sudoers.d/${OS_USER}
}

ssh_config_custom(){
  # disable password for ssh
  echo 'PasswordAuthentication no' > /etc/ssh/sshd_config.d/99-no-password.conf
  command -v restorecon > /dev/null && restorecon -RvF /etc/ssh/sshd_config.d/99-no-password.conf || true
}

libvirt_config(){

cat << XML > /etc/libvirt/qemu/networks/bridged.xml
<network>
  <name>bridged</name>
  <forward mode="bridge"/>
  <bridge name="br0"/>
</network>
XML

  # virsh net-start bridged-network
  # virsh net-autostart bridged-network

  ln -s /etc/libvirt/qemu/networks/bridged.xml \
    /etc/libvirt/qemu/networks/autostart/

cat << XML > /etc/libvirt/storage/vmdata.xml
<pool type="logical">
  <name>vmdata</name>
  <source>
    <name>vmdata</name>
    <format type="lvm2"/>
  </source>
  <target>
    <path>/dev/vmdata</path>
  </target>
</pool>
XML

  ln -s /etc/libvirt/storage/vmdata.xml \
    /etc/libvirt/storage/autostart/

  systemctl enable libvirtd
  systemctl enable libvirt-guests
}

automatic_updates(){
  systemctl enable dnf-automatic-install.timer
  sed -i 's/apply_updates.*/apply_updates = yes/' /etc/dnf/automatic.conf
}

main(){
  ssh_add_user_key
  ssh_config_custom
  luks_add_random_key
  clevis_setup_root
  # clevis_create_script
  libvirt_config
  automatic_updates
}

main

%end
